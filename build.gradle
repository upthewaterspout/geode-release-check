apply plugin: 'java'

if(!project.hasProperty('mavenURL') || !project.hasProperty('downloadURL') || !project.hasProperty('version')) {
  throw new GradleException("Usage: ./gradlew build -PmavenURL= -PdownloadURL= -version=");
}

def downloadDir = "${project.buildDir}/dist.apache.org/repos/dist/dev/geode/$version"
def srcDist = "${project.buildDir}/srcDist"
def binDist = "${project.buildDir}/binDist"
def srcClone = "${project.buildDir}/srcClone"
def versionNORC = version.replaceAll(/.RC\d+/, "");

repositories {
    jcenter()
    maven { url "$mavenURL" }
}

dependencies {
    compile "org.apache.geode:geode-core:$versionNORC"
   testCompile 'junit:junit:4.12'
   testCompile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.4.1.201607150455-r'
}

test {
  systemProperty 'SOURCE_CHECKOUT', srcClone;
}


//TODO - remove command line dependency - maybe use ant get?
task download(type:Exec) {
  commandLine 'wget', "$downloadURL", "-m", "-np", "-nv"
  workingDir=project.buildDir
}

//TODO - remove command line dependency
task verifyMD5(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'md5sum -c *.md5'
  workingDir=downloadDir
}

//TODO - remove command line dependency
task verifySHA(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'sha256sum -c *.sha256'
  workingDir=downloadDir
}

//TODO - remove command line dependency
task verifyGPG(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'ls *.asc | xargs -n1 gpg --verify'
  workingDir=downloadDir
}

task verifySigs(dependsOn: [verifyMD5, verifySHA, verifyGPG])

task unzipSrc(type: Copy, dependsOn: download) {
  def zipFile = file("${downloadDir}/apache-geode-src-${versionNORC}.zip")
  def outputDir = file(srcDist)

  from zipTree(zipFile)
  into outputDir
}

task unzipBin(type: Copy, dependsOn: download) {
  def zipFile = file("${downloadDir}/apache-geode-${versionNORC}.zip")
  def outputDir = file(binDist)

  from zipTree(zipFile)
  into outputDir
}

task testgfsh(type: Exec, dependsOn: unzipBin) {
  workingDir="${binDist}/apache-geode-$versionNORC"
  commandLine "$projectDir/scripts/gfsh_test.sh"
}


//This is deliberately *not* using gradle build to make sure the wrapper works
task buildSrc(type: Exec, dependsOn: unzipSrc) {
  workingDir="${srcDist}/apache-geode-src-$versionNORC"
  commandLine './gradlew', 'build'
}

//TODO - remove command line dependency
task cloneSrc(type:Exec) {
  commandLine 'git', 'clone', '--depth=1', "--branch=rel/v${version}", "https://github.com/apache/geode", srcClone
  onlyIf {
    !file("$srcClone/.git").exists();
  }
}

//TODO - remove command line dependency
task compareSrc(type:Exec, dependsOn: cloneSrc) {
  commandLine 'bash', '-c', 
  """diff -r -q \
    -x build \
    -x gradlew \
    -x gradle-wrapper.jar \
    -x gradlew.bat \
    -x .git \
    -x .gitignore \
    -x .buildinfo \
    -x .gradle \
    -x .travis.yml \
    -x KEYS \
    ${srcDist}/apache-geode-src-${versionNORC} ${srcClone}"""
}

test.dependsOn cloneSrc
check.dependsOn verifySigs, buildSrc, testgfsh, compareSrc
