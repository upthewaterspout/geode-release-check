apply plugin: 'java'

if(!project.hasProperty('mavenURL') || !project.hasProperty('downloadURL') || !project.hasProperty('version')) {
  throw new GradleException("Usage: ./gradlew build -PmavenURL= -PdownloadURL= -version=");
}

def downloadDir = "${project.buildDir}/dist.apache.org/repos/dist/dev/geode/$version"
def srcDist = "${project.buildDir}/srcDist"
def exampleSrc = "${project.buildDir}/exampleSrc"
def binDist = "${project.buildDir}/binDist"
def srcClone = "${project.buildDir}/srcClone"
def nativeSrcDist = "${project.buildDir}/nativeSrcDist"
def nativeSrcClone = "${project.buildDir}/nativeSrcClone"
def versionNORC = version.replaceAll(/.RC\d+/, "");

repositories {
    jcenter()
    maven { url "$mavenURL" }
}

dependencies {
    compile "org.apache.geode:geode-core:$versionNORC"
   testCompile 'junit:junit:4.12'
   testCompile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.4.1.201607150455-r'
}

test {
  systemProperty 'SOURCE_CHECKOUT', srcClone;
}


//TODO - remove command line dependency - maybe use ant get?
task download(type:Exec) {
  commandLine 'wget', "$downloadURL", "-m", "-np", "-nv"
  workingDir=project.buildDir
}

//TODO - remove command line dependency
task verifySHA(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'ls *.zip *.tar.gz *.tgz | xargs -n1 -I {} bash -c "shasum -c {}.sha*"'
  workingDir=downloadDir
}

//TODO - remove command line dependency
task verifyGPG(type:Exec, dependsOn: download) {
  commandLine 'bash', '-c', 'ls *.zip *.tar.gz *.tgz | xargs -n1 -I {} gpg --verify {}.asc'
  workingDir=downloadDir
}

task verifySigs(dependsOn: [verifySHA, verifyGPG])

task unzipSrc(type: Copy, dependsOn: download) {
  def zipFile = file("${downloadDir}/apache-geode-${versionNORC}-src.tgz")
  def outputDir = file(srcDist)

  from tarTree(zipFile)
  into outputDir
}

task unzipBin(type: Copy, dependsOn: download) {
  def zipFile = file("${downloadDir}/apache-geode-${versionNORC}.tgz")
  def outputDir = file(binDist)

  from tarTree(zipFile)
  into outputDir
}

task testgfsh(type: Exec, dependsOn: unzipBin) {
  workingDir="${binDist}/apache-geode-$versionNORC"
  commandLine "$projectDir/scripts/gfsh_test.sh"
}

task unzipExampleSrc(type: Copy, dependsOn: download) {
  def zipFile = file("${downloadDir}/apache-geode-examples-${versionNORC}-src.tgz")
  def outputDir = file(exampleSrc)

  from tarTree(zipFile)
  into outputDir
}


//This is deliberately *not* using gradle build to make sure the wrapper works
task buildSrc(type: Exec, dependsOn: unzipSrc) {
  workingDir="${srcDist}/apache-geode-$versionNORC-src"
  commandLine './gradlew', 'build'
}

//This is deliberately *not* using gradle build to make sure the wrapper works
task buildExampleSrc(type: Exec, dependsOn: unzipExampleSrc) {
  workingDir="${exampleSrc}/apache-geode-examples-$versionNORC-src"
  commandLine './gradlew', 'build', 'runAll', "-PgeodeRepositoryUrl=$mavenURL", "-PgeodeReleaseUrl=$downloadURL"
}

//TODO - remove command line dependency
task cloneSrc(type:Exec) {
  commandLine 'git', 'clone', '--depth=1', "--branch=rel/v${version}", "https://github.com/apache/geode", srcClone
  onlyIf {
    !file("$srcClone/.git").exists();
  }
}

task cloneNativeSrc(type:Exec) {
  commandLine 'git', 'clone', '--depth=1', "--branch=rel/v${version}", "https://github.com/apache/geode-native", nativeSrcClone
  onlyIf {
    !file("$nativeSrcClone/.git").exists();
  }
}

task unzipSrcNative(type: Copy, dependsOn: download) {
  def zipFile = file("${downloadDir}/apache-geode-native-${versionNORC}-src.tgz")
  def outputDir = file(nativeSrcDist)

  from tarTree(zipFile)
  into outputDir
}

//TODO - remove command line dependency
task compareSrc(type:Exec, dependsOn: cloneSrc) {
  commandLine 'bash', '-c', 
  """diff -r -q \
    -x build \
    -x gradlew \
    -x gradle-wrapper.jar \
    -x gradlew.bat \
    -x .git \
    -x .gitignore \
    -x .buildinfo \
    -x .gradle \
    -x .travis.yml \
    -x jpf.properties \
    -x .gitattributes \
    -x geode-old-versions \
    -x KEYS \
    ${srcDist}/apache-geode-${versionNORC}-src ${srcClone}"""
}


task compareNativeSrc(type:Exec, dependsOn: [cloneNativeSrc, unzipSrcNative]) {
  commandLine 'bash', '-c', 
  """diff -r -q \
    -x .git \
    -x .gitignore \
    ${nativeSrcDist}/apache-geode-native-${versionNORC}-src ${nativeSrcClone}"""
}

test.dependsOn cloneSrc
check.dependsOn verifySigs, buildSrc, testgfsh, compareSrc, buildExampleSrc, compareNativeSrc
